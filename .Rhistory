#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
# Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
View(poll)
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
View(plant)
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
View(poll)
timestep<- 0;
time_steps<- 50;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
# Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
activation<- function(inds, active=2, emergence=8){
for(i in dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}}
View(poll)
timestep<- 0;
time_steps<- 50;
while(timestep < time_steps){
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
time_steps<- 58;
timestep<- 58;
poll<-activation(poll)
activation<- function(inds, active=2, emergence=8){
for(i in dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
poll<-activation(plant)
# Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
activation<- function(inds, active=2, emergence=8){
for(i in dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 60;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
View(poll)
activation<- function(inds, active=2, emergence=8){
for(i in dim(inds)[1]){
if(inds[i, emergence] <= timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 60;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
activation<- function(inds, active=2, emergence=8){
for(i in length(inds)[,8]){
if(inds[i, emergence] <= timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 60;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
activation<- function(inds, active=2, emergence=8){
for(i in length(inds)[,8]){
if(inds[i, emergence] <= timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
activation<- function(inds, active=2, emergence=8){
for(i in 1:dim(inds)[1]){
if(inds[i, emergence] <= timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 60;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
activation<- function(inds, active=2, emergence=8){
for(i in 1:dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
# Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
activation<- function(inds, active=2, emergence=8){
for(i in 1:dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 60;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
# Set up info for pollinators ####
# Species info
# Basic array
poll_species<-array(data=0, dim=c(2,5));
colnames(poll_species)<-c("species","interactions","midpoint","scale","efficacy")
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
poll_species[, 1]<-seq_len(nrow(poll_species))
#Pollinator efficacy
poll_species[,5]<-sample(seq(from = 0.05, to = 0.8, by=0.05),size=length(poll_species[,3]))
# Coefficients - midpoint
poll_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(poll_species[,3]))
# Coefficients - scale
poll_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(poll_species[,4]))
## Initialise array for pollinator individuals
poll        <- array(data = 0, dim = c(20, 8));
colnames(poll) <- c("species","active","dead", "hunger", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
poll[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
poll<-merge(poll, poll_species, by = "species")
# Set up plant information ####
# Species info
# Basic array
plant_species<-array(data=0, dim=c(2,5));
colnames(plant_species)<-c("species","interactions", "midpoint","scale", "blank") # At this point I'm adding a blank column in just so there are the same number of columns for plant and pollinator individuals so I don't have to refer to different columns when writing a common function but open to better solutions if they exist
# Add species trait data (interactions will be added later as we are going to reference species in the plant array, so that also needs to be completed)
#Species id
plant_species[, 1]<-seq_len(nrow(plant_species))
# Coefficients - midpoint
plant_species[,3]<-sample(seq(from = 20, to = 60, by=1),size=length(plant_species[,3]))
# Coefficients - scale
plant_species[,4]<-sample(seq(from = 0.2, to = 0.6, by=0.05),size=length(plant_species[,4]))
## Initialise array for plant individuals
plant        <- array(data = 0, dim = c(20, 8));
colnames(plant) <- c("species","active","dead", "pollinated", "maturity", "x_loc", "y_loc", "emergence")
# Set species - when starting up the model for real will need to decide on initial numbers of species and individuals to add to the landscape but for practice purposes I'm just doing 10 of each of the two species
plant[,1]<-rep(1:2, each=1, length.out=20)
#Merge with species info. At the moment this turns it into a df, presumably because I'm using merge? Not sure what the alternatives are
plant<-merge(plant, plant_species, by = "species")
# Define emergence function & initialise emergence ####
# Not sure if this is the best way to do this. Currently having to generate a random number column and then apply emergence function using the number from that column. Tried to generate the random number (rand) within the function but couldn't figure out how to stop it generating a single number rather than resample with each row
poll$rand<-runif(length(poll[,1]),0,1)
plant$rand<-runif(length(plant[,1]),0,1)
emergence <- function(poll,midpoint=10,scale=11,rand=13){
timestep<- poll[,midpoint] - (log((1/poll[,rand])-1)/poll[,scale])
return(round(timestep, digits=0))
}
poll[,8]<-emergence(poll)
plant[,8]<-emergence(plant)
# Activate individuals according to emergence ####
activation<- function(inds, active=2, emergence=8){
for(i in 1:dim(inds)[1]){
if(inds[i, emergence] == timestep){         # If timestep is equal to emergence
inds[i, active] <- 1;    # Make individual active ('active' column = 1)
}}
return(inds)}
timestep<- 0;
time_steps<- 42;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
timestep<- 0;
time_steps<- 51;
while(timestep < time_steps){
poll<- activation(poll);
plant<- activation(plant);
poll            <- poll[poll[, 3] == 0,]
plant            <- plant[plant[, 3] == 0,]
timestep<- timestep + 1;
}
for(i in 1:1000){
if i %% 17 == 0;
print i
}
?print
for(i in 1:1000){
if i %% 17 == 0;
print(i)
}
for(i in 1:1000){
if (i %% 17 == 0){
print(i)
}}
for(i in 1:1000){
if (i %% 17 == 0){
print(i)
}}
